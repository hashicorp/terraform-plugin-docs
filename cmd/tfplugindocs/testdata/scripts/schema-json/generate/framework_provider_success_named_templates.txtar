# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Successful run of tfplugindocs on a Framework provider with "named" template paths (i.e. templates/resources/<resource name>.md.tmpl)
# Templates test all implemented data fields and functions.
[!unix] skip
exec tfplugindocs --provider-name=terraform-provider-scaffolding --providers-schema=schema.json --rendered-provider-name=Scaffolding
cmp stdout expected-output.txt
cmpenv docs/index.md expected-index.md
cmpenv docs/data-sources/example.md expected-datasource.md
cmpenv docs/resources/example.md expected-resource.md
cmpenv docs/functions/example.md expected-function.md
cmpenv docs/ephemeral-resources/example.md expected-ephemeral-resource.md
cmpenv docs/actions/example.md expected-action.md
cmpenv docs/list-resources/example.md expected-list-resource.md

-- expected-output.txt --
rendering website for provider "terraform-provider-scaffolding" (as "Scaffolding")
copying any existing content to tmp dir
exporting schema from JSON file
getting provider schema
generating missing templates
generating missing resource content
resource "scaffolding_example" template exists, skipping
generating missing data source content
data-source "scaffolding_example" template exists, skipping
generating missing function content
function "example" template exists, skipping
generating missing ephemeral resource content
ephemeral resource "scaffolding_example" template exists, skipping
generating missing action content
action "scaffolding_example" template exists, skipping
generating missing list resource content
list resource "scaffolding_example" template exists, skipping
generating missing provider content
provider "terraform-provider-scaffolding" template exists, skipping
rendering static website
cleaning rendered website dir
rendering templated website to static markdown
rendering "actions/example.md.tmpl"
rendering "data-sources/example.md.tmpl"
rendering "ephemeral-resources/example.md.tmpl"
rendering "functions/example.md.tmpl"
rendering "index.md.tmpl"
rendering "list-resources/example.md.tmpl"
rendering "resources/example.md.tmpl"
-- expected-action.md --
# Data Fields

Name: scaffolding_example
Type: Action
Description: Example action
HasExample: true
ExampleFile: $WORK/examples/actions/scaffolding_example/action.tf
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- action schema generated by tfplugindocs -->
## Schema

### Required

- `required_attr` (String) Example required attribute

### Optional

- `optional_attr` (String) Example optional attribute



# Functions

lower: action
plainmarkdown: Action
prefixlines: Prefix: Action
split: [scaffolding example]
title: Action
trimspace: Action
upper: ACTION

# Conditionals and File Functions

printf tffile:
## Example Usage

{{tffile "$WORK/examples/actions/scaffolding_example/action.tf"}}

tffile:
## Example Usage

```terraform
action "scaffolding_example" "example" {
  config {
    required_attr = "some-value"
  }
}
```
-- expected-list-resource.md --
# Data Fields

Name: scaffolding_example
Type: List Resource
Description: Example list resource
HasExample: true
ExampleFile: $WORK/examples/list-resources/scaffolding_example/list-resource.tfquery.hcl
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- schema generated by tfplugindocs -->
## Schema

### Required

- `required_attr` (String) Example required attribute

### Optional

- `optional_attr` (String) Example optional attribute



# Functions

lower: list resource
plainmarkdown: List Resource
prefixlines: Prefix: List Resource
split: [scaffolding example]
title: List Resource
trimspace: List Resource
upper: LIST RESOURCE

# Conditionals and File Functions

printf tffile:
## Example Usage

{{tffile "$WORK/examples/list-resources/scaffolding_example/list-resource.tfquery.hcl"}}

tffile:
## Example Usage

```terraform
list "scaffolding_example" "example" {
  provider = scaffolding

  config {
    required_attr = "some-value"
  }
}
```
-- expected-datasource.md --
# Data Fields

Name: scaffolding_example
Type: Data Source
Description: Example data source
HasExample: true
ExampleFile: $WORK/examples/data-sources/scaffolding_example/data-source.tf
HasImport: false
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `configurable_attribute` (String) Example configurable attribute

### Read-Only

- `id` (String) Example identifier



# Functions

lower: data source
plainmarkdown: Data Source
prefixlines: Prefix: Data Source
split: [scaffolding example]
title: Data Source
trimspace: Data Source
upper: DATA SOURCE

# Conditionals and File Functions

printf codefile:


printf tffile:
## Example Usage

{{tffile "$WORK/examples/data-sources/scaffolding_example/data-source.tf"}}

codefile:


tffile:
## Example Usage

```terraform
data "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
```
-- expected-function.md --
# Data Fields

Name: example
Type: function
Description: Given a string value, returns the same value.
Summary: Echo a string
HasExample: true
ExampleFile: $WORK/examples/functions/example/function.tf
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
FunctionSignatureMarkdown: <!-- signature generated by tfplugindocs -->
```text
example(input string, variadicInput string...) string
```
FunctionArgumentsMarkdown: <!-- arguments generated by tfplugindocs -->
1. `input` (String) Value to echo.
HasVariadic: true
FunctionVariadicArgumentMarkdown: <!-- variadic argument generated by tfplugindocs -->
1. `variadicInput` (Variadic, String) Variadic input to echo.

# Functions

lower: function
plainmarkdown: function
prefixlines: Prefix: function
split: [example]
title: Function
trimspace: function
upper: FUNCTION

# Conditionals and File Functions

printf tffile:
## Example Usage

{{tffile "$WORK/examples/functions/example/function.tf"}}

tffile:
## Example Usage

```terraform
output "test" {
  value = provider::scaffolding::example("testvalue1", "testvalue2")
}
```
-- expected-index.md --
# Data Fields

Description: Example provider
HasExample: true
ExampleFile: $WORK/examples/provider/provider.tf
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `endpoint` (String) Example provider attribute



# Functions

lower: terraform-provider-scaffolding
plainmarkdown: terraform-provider-scaffolding
prefixlines: Prefix: terraform-provider-scaffolding
split: [terraform provider scaffolding]
title: Terraform-Provider-Scaffolding
trimspace: terraform-provider-scaffolding
upper: TERRAFORM-PROVIDER-SCAFFOLDING

# Conditionals and File Functions

printf tffile:
## Example Usage

{{tffile "$WORK/examples/provider/provider.tf"}}

tffile:
## Example Usage

```terraform
provider "scaffolding" {
  # example configuration here
}
```
-- expected-resource.md --
# Data Fields

Name: scaffolding_example
Type: Resource
Description: Example resource
HasExample: true
ExampleFile: $WORK/examples/resources/scaffolding_example/resource.tf
HasImport: true
ImportFile: $WORK/examples/resources/scaffolding_example/import.sh
HasImportIDConfig: true
ImportIDConfigFile: $WORK/examples/resources/scaffolding_example/import-by-string-id.tf
HasImportIdentityConfig: true
ImportIdentityConfigFile: $WORK/examples/resources/scaffolding_example/import-by-identity.tf
IdentitySchemaMarkdown: <!-- schema generated by tfplugindocs -->
### Identity Schema

#### Required

- `name` (String) Name of resource.

#### Optional

- `project` (String) Project of resource, can also be sourced via `SCAFFOLDING_PROJECT` environment variable.
- `region` (String) Region of resource, can also be sourced via `SCAFFOLDING_REGION` environment variable.

ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `configurable_attribute` (String) Example configurable attribute
- `defaulted` (String) Example configurable attribute with default value

### Read-Only

- `id` (String) Example identifier



# Functions

lower: resource
plainmarkdown: Resource
prefixlines: Prefix: Resource
split: [scaffolding example]
title: Resource
trimspace: Resource
upper: RESOURCE

# Conditionals and File Functions

printf codefile:
## Import

Import is supported using the following syntax:

{{codefile "shell" "$WORK/examples/resources/scaffolding_example/import.sh"}}

printf tffile:
## Example Usage

{{tffile "$WORK/examples/resources/scaffolding_example/resource.tf"}}

codefile:
## Import

Import is supported using the following syntax:

```shell
terraform import scaffolding_example.example "id-123"
```

tffile:
## Example Usage

```terraform
resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
```
-- expected-ephemeral-resource.md --
# Data Fields

Name: scaffolding_example
Type: Ephemeral Resource
Description: Example ephemeral resource
HasExample: true
ExampleFile: $WORK/examples/ephemeral-resources/scaffolding_example/ephemeral-resource.tf
HasImport: false
ProviderName: terraform-provider-scaffolding
ProviderShortName: Scaffolding
RenderedProviderName: Scaffolding
SchemaMarkdown: <!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `configurable_attribute` (String) Example configurable attribute
- `defaulted` (String) Example configurable attribute with default value

### Read-Only

- `id` (String) Example identifier



# Functions

lower: ephemeral resource
plainmarkdown: Ephemeral Resource
prefixlines: Prefix: Ephemeral Resource
split: [scaffolding example]
title: Ephemeral Resource
trimspace: Ephemeral Resource
upper: EPHEMERAL RESOURCE

# Conditionals and File Functions

printf codefile:


printf tffile:
## Example Usage

{{tffile "$WORK/examples/ephemeral-resources/scaffolding_example/ephemeral-resource.tf"}}

codefile:


tffile:
## Example Usage

```terraform
resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
```
-- templates/actions/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/list-resources/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/data-sources/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
HasImport: {{.HasImport}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/index.md.tmpl --
# Data Fields

Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .ProviderName | lower }}
plainmarkdown: {{ .ProviderName | plainmarkdown }}
prefixlines: {{ .ProviderName | prefixlines "Prefix: " }}
split: {{ split .ProviderName "-" }}
title: {{ .ProviderName | title }}
trimspace: {{ .ProviderName | trimspace }}
upper: {{ .ProviderName | upper }}

# Conditionals and File Functions

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/functions/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
Summary: {{.Summary}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
FunctionSignatureMarkdown: {{.FunctionSignatureMarkdown}}
FunctionArgumentsMarkdown: {{.FunctionArgumentsMarkdown}}
HasVariadic: {{.HasVariadic}}
FunctionVariadicArgumentMarkdown: {{.FunctionVariadicArgumentMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/resources/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
HasImport: {{.HasImport}}
ImportFile: {{.ImportFile}}
HasImportIDConfig: {{.HasImportIDConfig}}
ImportIDConfigFile: {{.ImportIDConfigFile}}
HasImportIdentityConfig: {{.HasImportIdentityConfig}}
ImportIdentityConfigFile: {{.ImportIdentityConfigFile}}
IdentitySchemaMarkdown: {{.IdentitySchemaMarkdown}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- templates/ephemeral-resources/example.md.tmpl --
# Data Fields

Name: {{.Name}}
Type: {{.Type}}
Description: {{.Description}}
HasExample: {{.HasExample}}
ExampleFile: {{.ExampleFile}}
HasImport: {{.HasImport}}
ProviderName: {{.ProviderName}}
ProviderShortName: {{.ProviderShortName}}
RenderedProviderName: {{.RenderedProviderName}}
SchemaMarkdown: {{.SchemaMarkdown}}

# Functions

lower: {{ .Type | lower }}
plainmarkdown: {{ .Type | plainmarkdown }}
prefixlines: {{ .Type | prefixlines "Prefix: " }}
split: {{ split .Name "_" }}
title: {{ .Type | title }}
trimspace: {{ .Type | trimspace }}
upper: {{ .Type | upper }}

# Conditionals and File Functions

printf codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}

printf tffile:
{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

codefile:
{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}
{{- end }}

tffile:
{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}
-- examples/README.md --
# Examples

This directory contains examples that are mostly used for documentation, but can also be run/tested manually via the Terraform CLI.

The document generation tool looks for files in the following locations by default. All other *.tf files besides the ones mentioned below are ignored by the documentation tool. This is useful for creating examples that can run and/or ar testable even if some parts are not relevant for the documentation.

* **provider/provider.tf** example file for the provider index page
* **data-sources/`full data source name`/data-source.tf** example file for the named data source page
* **resources/`full resource name`/resource.tf** example file for the named data source page
-- examples/actions/scaffolding_example/action.tf --
action "scaffolding_example" "example" {
  config {
    required_attr = "some-value"
  }
}
-- examples/list-resources/scaffolding_example/list-resource.tfquery.hcl --
list "scaffolding_example" "example" {
  provider = scaffolding

  config {
    required_attr = "some-value"
  }
}
-- examples/data-sources/scaffolding_example/data-source.tf --
data "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
-- examples/functions/example/function.tf --
output "test" {
  value = provider::scaffolding::example("testvalue1", "testvalue2")
}
-- examples/provider/provider.tf --
provider "scaffolding" {
  # example configuration here
}
-- examples/resources/scaffolding_example/resource.tf --
resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
-- examples/ephemeral-resources/scaffolding_example/ephemeral-resource.tf --
resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
-- examples/resources/scaffolding_example/import-by-string-id.tf --
import {
  to = scaffolding_example.example
  id = "id-123"
}

resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
-- examples/resources/scaffolding_example/import-by-identity.tf --
import {
  to = scaffolding_example.example
  identity = {
    name    = "resource-abc"
    project = "test-project-123" # can also be read via SCAFFOLDING_PROJECT environment variable
    region  = "us-east-2"        # can also be read via SCAFFOLDING_REGION environment variable
  }
}

resource "scaffolding_example" "example" {
  configurable_attribute = "some-value"
}
-- examples/resources/scaffolding_example/import.sh --
terraform import scaffolding_example.example "id-123"
-- schema.json --
{
    "format_version": "1.0",
    "provider_schemas": {
        "registry.terraform.io/hashicorp/scaffolding": {
            "provider": {
                "version": 0,
                "block": {
                    "attributes": {
                        "endpoint": {
                            "type": "string",
                            "description": "Example provider attribute",
                            "description_kind": "markdown",
                            "optional": true
                        }
                    },
                    "description": "Example provider",
                    "description_kind": "markdown"
                }
            },
            "list_resource_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "block": {
                        "attributes": {
                            "required_attr": {
                                "type": "string",
                                "description": "Example required attribute",
                                "description_kind": "plain",
                                "required": true
                            },
                            "optional_attr": {
                                "type": "string",
                                "description": "Example optional attribute",
                                "description_kind": "plain",
                                "optional": true
                            }
                        },
                        "description": "Example list resource",
                        "description_kind": "plain"
                    }
                }
            },
            "action_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "block": {
                        "attributes": {
                            "required_attr": {
                                "type": "string",
                                "description": "Example required attribute",
                                "description_kind": "plain",
                                "required": true
                            },
                            "optional_attr": {
                                "type": "string",
                                "description": "Example optional attribute",
                                "description_kind": "plain",
                                "optional": true
                            }
                        },
                        "description": "Example action",
                        "description_kind": "plain"
                    }
                }
            },
            "resource_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "block": {
                        "attributes": {
                            "configurable_attribute": {
                                "type": "string",
                                "description": "Example configurable attribute",
                                "description_kind": "markdown",
                                "optional": true
                            },
                            "defaulted": {
                                "type": "string",
                                "description": "Example configurable attribute with default value",
                                "description_kind": "markdown",
                                "optional": true,
                                "computed": true
                            },
                            "id": {
                                "type": "string",
                                "description": "Example identifier",
                                "description_kind": "markdown",
                                "computed": true
                            }
                        },
                        "description": "Example resource",
                        "description_kind": "markdown"
                    }
                }
            },
            "resource_identity_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "attributes": {
                        "name": {
                            "type": "string",
                            "description": "Name of resource.",
                            "required_for_import": true
                        },
                        "project": {
                            "type": "string",
                            "description": "Project of resource, can also be sourced via `SCAFFOLDING_PROJECT` environment variable.",
                            "optional_for_import": true
                        },
                        "region": {
                            "type": "string",
                            "description": "Region of resource, can also be sourced via `SCAFFOLDING_REGION` environment variable.",
                            "optional_for_import": true
                        }
                    }
                }
            },
            "ephemeral_resource_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "block": {
                        "attributes": {
                            "configurable_attribute": {
                                "type": "string",
                                "description": "Example configurable attribute",
                                "description_kind": "markdown",
                                "optional": true
                            },
                            "defaulted": {
                                "type": "string",
                                "description": "Example configurable attribute with default value",
                                "description_kind": "markdown",
                                "optional": true,
                                "computed": true
                            },
                            "id": {
                                "type": "string",
                                "description": "Example identifier",
                                "description_kind": "markdown",
                                "computed": true
                            }
                        },
                        "description": "Example ephemeral resource",
                        "description_kind": "markdown"
                    }
                }
            },
            "data_source_schemas": {
                "scaffolding_example": {
                    "version": 0,
                    "block": {
                        "attributes": {
                            "configurable_attribute": {
                                "type": "string",
                                "description": "Example configurable attribute",
                                "description_kind": "markdown",
                                "optional": true
                            },
                            "id": {
                                "type": "string",
                                "description": "Example identifier",
                                "description_kind": "markdown",
                                "computed": true
                            }
                        },
                        "description": "Example data source",
                        "description_kind": "markdown"
                    }
                }
            },
            "functions": {
                "example": {
                    "description": "Given a string value, returns the same value.",
                    "summary": "Echo a string",
                    "return_type": "string",
                    "parameters": [
                        {
                            "name": "input",
                            "description": "Value to echo.",
                            "type": "string"
                        }
                    ],
                    "variadic_parameter": {
                        "name": "variadicInput",
                        "description": "Variadic input to echo.",
                        "type": "string"
                    }
                }
            }
        }
    }
}