# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Successful run of tfplugindocs on a stripped-down version of the Null provider with pre-exiting templates, examples,
# docs, and non-tfplugindocs managed docs (docs/cdktf subdirectory).
[!unix] skip
exec tfplugindocs --provider-name=terraform-provider-null --providers-schema=schema.json
cmp stdout expected-output.txt

-- expected-output.txt --
rendering website for provider "terraform-provider-null" (as "terraform-provider-null")
copying any existing content to tmp dir
exporting schema from JSON file
getting provider schema
rendering missing docs
generating missing resource content
resource "null_resource" fallback template exists
generating template for "null_resource"
generating missing data source content
resource "null_data_source" fallback template exists
generating template for "null_data_source"
generating missing provider content
provider "terraform-provider-null" template exists, skipping
rendering static website
cleaning rendered website dir
removing directory: "data-sources"
removing file: "index.md"
removing directory: "resources"
rendering templated website to static markdown
rendering "data-sources/data_source.md.tmpl"
rendering "index.md.tmpl"
rendering "resources/resource.md.tmpl"
-- templates/data-sources.md.tmpl --
---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}}

{{ .Description | trimspace }}

{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}
-- templates/index.md.tmpl --
---
page_title: "Provider: Null"
description: |-
  The null provider provides no-op constructs that can be useful helpers in tricky cases.
---

# Null Provider

The `null` provider is a rather-unusual provider that has constructs that
intentionally do nothing. This may sound strange, and indeed these constructs
do not need to be used in most cases, but they can be useful in various
situations to help orchestrate tricky behavior or work around limitations.

The documentation of each feature of this provider, accessible via the
navigation, gives examples of situations where these constructs may prove
useful.

Usage of the `null` provider can make a Terraform configuration harder to
understand. While it can be useful in certain cases, it should be applied with
care and other solutions preferred when available.

{{ .SchemaMarkdown | trimspace }}
-- templates/resources.md.tmpl --
---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}}

{{ .Description | trimspace }}

{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}

-- docs/cdktf/python/data-sources/data_source.md --
---

<!-- Please do not edit this file, it is generated. -->
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_data_source Data Source - terraform-provider-null"
subcategory: ""
description: |-
  The null_data_source data source implements the standard data source lifecycle but does not
  interact with any external APIs.
  Historically, the null_data_source was typically used to construct intermediate values to re-use elsewhere in configuration. The
  same can now be achieved using locals https://developer.hashicorp.com/terraform/language/values/locals or the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data in Terraform 1.4 and later.
---

# null_data_source

The `null_data_source` data source implements the standard data source lifecycle but does not
interact with any external APIs.

Historically, the `null_data_source` was typically used to construct intermediate values to re-use elsewhere in configuration. The
same can now be achieved using [locals](https://developer.hashicorp.com/terraform/language/values/locals) or the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) in Terraform 1.4 and later.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformCount, Fn, TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elb import Elb
from imports.aws.instance import Instance
from imports.null.data_null_data_source import DataNullDataSource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        blue_count = TerraformCount.of(Token.as_number("3"))
        blue = Instance(self, "blue",
            ami="ami-0dcc1e21636832c5d",
            instance_type="m5.large",
            count=blue_count
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        green_count = TerraformCount.of(Token.as_number("3"))
        green = Instance(self, "green",
            ami="ami-0dcc1e21636832c5d",
            instance_type="m5.large",
            count=green_count
        )
        values = DataNullDataSource(self, "values",
            inputs={
                "all_server_ids": Token.as_string(
                    Fn.concat([
                        Fn.lookup_nested(green, ["*", "id"]),
                        Fn.lookup_nested(blue, ["*", "id"])
                    ])),
                "all_server_ips": Token.as_string(
                    Fn.concat([
                        Fn.lookup_nested(green, ["*", "private_ip"]),
                        Fn.lookup_nested(blue, ["*", "private_ip"])
                    ]))
            }
        )
        TerraformOutput(self, "all_server_ids",
            value=Fn.lookup_nested(values.outputs, ["\"all_server_ids\""])
        )
        TerraformOutput(self, "all_server_ips",
            value=Fn.lookup_nested(values.outputs, ["\"all_server_ips\""])
        )
        Elb(self, "main",
            instances=Token.as_list(
                Fn.lookup_nested(values.outputs, ["\"all_server_ids\""])),
            listener=[ElbListener(
                instance_port=8000,
                instance_protocol="http",
                lb_port=80,
                lb_protocol="http"
            )
            ]
        )
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `has_computed_default` (String) If set, its literal value will be stored and returned. If not, its value defaults to `"default"`. This argument exists primarily for testing and has little practical use.
- `inputs` (Map of String) A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.

### Read-Only

- `id` (String, Deprecated) This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
- `outputs` (Map of String) After the data source is "read", a copy of the `inputs` map.
- `random` (String) A random value. This is primarily for testing and has little practical use; prefer the [hashicorp/random provider](https://registry.terraform.io/providers/hashicorp/random) for more practical random number use-cases.


<!-- cache-key: cdktf-0.18.0 input-c57aa183eb3faecd392a2666301466639e17a246180fc7127c0c9b366d16d65b 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/cdktf/python/index.md --
---
page_title: "Provider: Null"
description: |-
  The null provider provides no-op constructs that can be useful helpers in tricky cases.
---


<!-- Please do not edit this file, it is generated. -->
# Null Provider

The `null` provider is a rather-unusual provider that has constructs that
intentionally do nothing. This may sound strange, and indeed these constructs
do not need to be used in most cases, but they can be useful in various
situations to help orchestrate tricky behavior or work around limitations.

The documentation of each feature of this provider, accessible via the
navigation, gives examples of situations where these constructs may prove
useful.

Usage of the `null` provider can make a Terraform configuration harder to
understand. While it can be useful in certain cases, it should be applied with
care and other solutions preferred when available.

<!-- schema generated by tfplugindocs -->
## Schema

<!-- cache-key: cdktf-0.18.0 input-d1e617f2c2c9e3d78274dec7e778b31db141151845c95c532b7c79f752c28fff 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/cdktf/python/resources/resource.md --
---

<!-- Please do not edit this file, it is generated. -->
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_resource Resource - terraform-provider-null"
subcategory: ""
description: |-
  The null_resource resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data instead.
  The triggers argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.
---

# null_resource

The `null_resource` resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) instead.

The `triggers` argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import SSHProvisionerConnection, FileProvisioner
from constructs import Construct
from cdktf import Token, TerraformCount, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.null.resource import Resource
from imports.aws.instance import Instance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        cluster_count = TerraformCount.of(Token.as_number("3"))
        cluster = Instance(self, "cluster",
            ami="ami-0dcc1e21636832c5d",
            instance_type="m5.large",
            count=cluster_count
        )
        null_provider_resource_cluster = Resource(self, "cluster_1",
            connection=SSHProvisionerConnection(
                host=Fn.element(Fn.lookup_nested(cluster, ["*", "public_ip"]), 0)
            ),
            triggers=[{
                "cluster_instance_ids": Fn.join(",",
                    Token.as_list(Fn.lookup_nested(cluster, ["*", "id"])))
            }
            ],
            provisioners=[FileProvisioner(
                type="remote-exec",
                inline=["bootstrap-cluster.sh " +
                    Token.as_string(
                        Fn.join(" ",
                            Token.as_list(Fn.lookup_nested(cluster, ["*", "private_ip"]))))
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        null_provider_resource_cluster.override_logical_id("cluster")
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `triggers` (Map of String) A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.

### Read-Only

- `id` (String) This is set to a random value at create time.


<!-- cache-key: cdktf-0.18.0 input-63b48b841b04abe2967ff224f186b1f32a497a024e9fa833ce9444eccb45113e 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/cdktf/typescript/data-sources/data_source.md --
---

<!-- Please do not edit this file, it is generated. -->
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_data_source Data Source - terraform-provider-null"
subcategory: ""
description: |-
  The null_data_source data source implements the standard data source lifecycle but does not
  interact with any external APIs.
  Historically, the null_data_source was typically used to construct intermediate values to re-use elsewhere in configuration. The
  same can now be achieved using locals https://developer.hashicorp.com/terraform/language/values/locals or the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data in Terraform 1.4 and later.
---

# null_data_source

The `nullDataSource` data source implements the standard data source lifecycle but does not
interact with any external APIs.

Historically, the `nullDataSource` was typically used to construct intermediate values to re-use elsewhere in configuration. The
same can now be achieved using [locals](https://developer.hashicorp.com/terraform/language/values/locals) or the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) in Terraform 1.4 and later.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import {
  Token,
  TerraformCount,
  Fn,
  TerraformOutput,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Elb } from "./.gen/providers/aws/elb";
import { Instance } from "./.gen/providers/aws/instance";
import { DataNullDataSource } from "./.gen/providers/null/data-null-data-source";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*In most cases loops should be handled in the programming language context and
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const blueCount = TerraformCount.of(Token.asNumber("3"));
    const blue = new Instance(this, "blue", {
      ami: "ami-0dcc1e21636832c5d",
      instanceType: "m5.large",
      count: blueCount,
    });
    /*In most cases loops should be handled in the programming language context and
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const greenCount = TerraformCount.of(Token.asNumber("3"));
    const green = new Instance(this, "green", {
      ami: "ami-0dcc1e21636832c5d",
      instanceType: "m5.large",
      count: greenCount,
    });
    const values = new DataNullDataSource(this, "values", {
      inputs: {
        all_server_ids: Token.asString(
          Fn.concat([
            Fn.lookupNested(green, ["*", "id"]),
            Fn.lookupNested(blue, ["*", "id"]),
          ])
        ),
        all_server_ips: Token.asString(
          Fn.concat([
            Fn.lookupNested(green, ["*", "private_ip"]),
            Fn.lookupNested(blue, ["*", "private_ip"]),
          ])
        ),
      },
    });
    new TerraformOutput(this, "all_server_ids", {
      value: Fn.lookupNested(values.outputs, ['"all_server_ids"']),
    });
    new TerraformOutput(this, "all_server_ips", {
      value: Fn.lookupNested(values.outputs, ['"all_server_ips"']),
    });
    new Elb(this, "main", {
      instances: Token.asList(
        Fn.lookupNested(values.outputs, ['"all_server_ids"'])
      ),
      listener: [
        {
          instancePort: 8000,
          instanceProtocol: "http",
          lbPort: 80,
          lbProtocol: "http",
        },
      ],
    });
  }
}

```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `hasComputedDefault` (String) If set, its literal value will be stored and returned. If not, its value defaults to `"default"`. This argument exists primarily for testing and has little practical use.
- `inputs` (Map of String) A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.

### Read-Only

- `id` (String, Deprecated) This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
- `outputs` (Map of String) After the data source is "read", a copy of the `inputs` map.
- `random` (String) A random value. This is primarily for testing and has little practical use; prefer the [hashicorp/random provider](https://registry.terraform.io/providers/hashicorp/random) for more practical random number use-cases.


<!-- cache-key: cdktf-0.18.0 input-c57aa183eb3faecd392a2666301466639e17a246180fc7127c0c9b366d16d65b 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/cdktf/typescript/index.md --
---
page_title: "Provider: Null"
description: |-
  The null provider provides no-op constructs that can be useful helpers in tricky cases.
---


<!-- Please do not edit this file, it is generated. -->
# Null Provider

The `null` provider is a rather-unusual provider that has constructs that
intentionally do nothing. This may sound strange, and indeed these constructs
do not need to be used in most cases, but they can be useful in various
situations to help orchestrate tricky behavior or work around limitations.

The documentation of each feature of this provider, accessible via the
navigation, gives examples of situations where these constructs may prove
useful.

Usage of the `null` provider can make a Terraform configuration harder to
understand. While it can be useful in certain cases, it should be applied with
care and other solutions preferred when available.

<!-- schema generated by tfplugindocs -->
## Schema

<!-- cache-key: cdktf-0.18.0 input-d1e617f2c2c9e3d78274dec7e778b31db141151845c95c532b7c79f752c28fff 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/cdktf/typescript/resources/resource.md --
---

<!-- Please do not edit this file, it is generated. -->
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_resource Resource - terraform-provider-null"
subcategory: ""
description: |-
  The null_resource resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data instead.
  The triggers argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.
---

# null_resource

The `nullResource` resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) instead.

The `triggers` argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformCount, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Resource } from "./.gen/providers/null/resource";
import { Instance } from "./.gen/providers/aws/instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*In most cases loops should be handled in the programming language context and
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const clusterCount = TerraformCount.of(Token.asNumber("3"));
    const cluster = new Instance(this, "cluster", {
      ami: "ami-0dcc1e21636832c5d",
      instanceType: "m5.large",
      count: clusterCount,
    });
    const nullProviderResourceCluster = new Resource(this, "cluster_1", {
      connection: {
        host: Fn.element(Fn.lookupNested(cluster, ["*", "public_ip"]), 0),
      },
      triggers: [
        {
          cluster_instance_ids: Fn.join(
            ",",
            Token.asList(Fn.lookupNested(cluster, ["*", "id"]))
          ),
        },
      ],
      provisioners: [
        {
          type: "remote-exec",
          inline: [
            "bootstrap-cluster.sh " +
              Token.asString(
                Fn.join(
                  " ",
                  Token.asList(Fn.lookupNested(cluster, ["*", "private_ip"]))
                )
              ),
          ],
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    nullProviderResourceCluster.overrideLogicalId("cluster");
  }
}

```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `triggers` (Map of String) A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.

### Read-Only

- `id` (String) This is set to a random value at create time.


<!-- cache-key: cdktf-0.18.0 input-63b48b841b04abe2967ff224f186b1f32a497a024e9fa833ce9444eccb45113e 556251879b8ed0dc4c87a76b568667e0ab5e2c46efdd14a05c556daf05678783-->
-- docs/data-sources/data_source.md --
---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_data_source Data Source - terraform-provider-null"
subcategory: ""
description: |-
  The null_data_source data source implements the standard data source lifecycle but does not
  interact with any external APIs.
  Historically, the null_data_source was typically used to construct intermediate values to re-use elsewhere in configuration. The
  same can now be achieved using locals https://developer.hashicorp.com/terraform/language/values/locals or the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data in Terraform 1.4 and later.
---

# null_data_source

The `null_data_source` data source implements the standard data source lifecycle but does not
interact with any external APIs.

Historically, the `null_data_source` was typically used to construct intermediate values to re-use elsewhere in configuration. The
same can now be achieved using [locals](https://developer.hashicorp.com/terraform/language/values/locals) or the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) in Terraform 1.4 and later.

## Example Usage

```terraform
resource "aws_instance" "green" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

resource "aws_instance" "blue" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

data "null_data_source" "values" {
  inputs = {
    all_server_ids = concat(
      aws_instance.green[*].id,
      aws_instance.blue[*].id,
    )
    all_server_ips = concat(
      aws_instance.green[*].private_ip,
      aws_instance.blue[*].private_ip,
    )
  }
}

resource "aws_elb" "main" {
  instances = data.null_data_source.values.outputs["all_server_ids"]

  # ...
  listener {
    instance_port     = 8000
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
}

output "all_server_ids" {
  value = data.null_data_source.values.outputs["all_server_ids"]
}

output "all_server_ips" {
  value = data.null_data_source.values.outputs["all_server_ips"]
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `has_computed_default` (String) If set, its literal value will be stored and returned. If not, its value defaults to `"default"`. This argument exists primarily for testing and has little practical use.
- `inputs` (Map of String) A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.

### Read-Only

- `id` (String, Deprecated) This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
- `outputs` (Map of String) After the data source is "read", a copy of the `inputs` map.
- `random` (String) A random value. This is primarily for testing and has little practical use; prefer the [hashicorp/random provider](https://registry.terraform.io/providers/hashicorp/random) for more practical random number use-cases.

-- docs/index.md --
---
page_title: "Provider: Null"
description: |-
  The null provider provides no-op constructs that can be useful helpers in tricky cases.
---

# Null Provider

The `null` provider is a rather-unusual provider that has constructs that
intentionally do nothing. This may sound strange, and indeed these constructs
do not need to be used in most cases, but they can be useful in various
situations to help orchestrate tricky behavior or work around limitations.

The documentation of each feature of this provider, accessible via the
navigation, gives examples of situations where these constructs may prove
useful.

Usage of the `null` provider can make a Terraform configuration harder to
understand. While it can be useful in certain cases, it should be applied with
care and other solutions preferred when available.

<!-- schema generated by tfplugindocs -->
## Schema
-- docs/resources/resource.md --
---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "null_resource Resource - terraform-provider-null"
subcategory: ""
description: |-
  The null_resource resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the terraform_data resource type https://developer.hashicorp.com/terraform/language/resources/terraform-data instead.
  The triggers argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.
---

# null_resource

The `null_resource` resource implements the standard resource lifecycle but takes no further action. On Terraform 1.4 and later, use the [terraform_data resource type](https://developer.hashicorp.com/terraform/language/resources/terraform-data) instead.

The `triggers` argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.

## Example Usage

```terraform
resource "aws_instance" "cluster" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

# The primary use-case for the null resource is as a do-nothing container
# for arbitrary actions taken by a provisioner.
#
# In this example, three EC2 instances are created and then a
# null_resource instance is used to gather data about all three
# and execute a single action that affects them all. Due to the triggers
# map, the null_resource will be replaced each time the instance ids
# change, and thus the remote-exec provisioner will be re-run.
resource "null_resource" "cluster" {
  # Changes to any instance of the cluster requires re-provisioning
  triggers = {
    cluster_instance_ids = join(",", aws_instance.cluster[*].id)
  }

  # Bootstrap script can run on any instance of the cluster
  # So we just choose the first in this case
  connection {
    host = element(aws_instance.cluster[*].public_ip, 0)
  }

  provisioner "remote-exec" {
    # Bootstrap script called with private_ip of each node in the cluster
    inline = [
      "bootstrap-cluster.sh ${join(" ",
      aws_instance.cluster[*].private_ip)}",
    ]
  }
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `triggers` (Map of String) A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.

### Read-Only

- `id` (String) This is set to a random value at create time.

-- examples/data-sources/null_data_source/data-source.tf --
resource "aws_instance" "green" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

resource "aws_instance" "blue" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

data "null_data_source" "values" {
  inputs = {
    all_server_ids = concat(
      aws_instance.green[*].id,
      aws_instance.blue[*].id,
    )
    all_server_ips = concat(
      aws_instance.green[*].private_ip,
      aws_instance.blue[*].private_ip,
    )
  }
}

resource "aws_elb" "main" {
  instances = data.null_data_source.values.outputs["all_server_ids"]

  # ...
  listener {
    instance_port     = 8000
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
}

output "all_server_ids" {
  value = data.null_data_source.values.outputs["all_server_ids"]
}

output "all_server_ips" {
  value = data.null_data_source.values.outputs["all_server_ips"]
}
-- examples/resources/null_resource/resource.tf --
resource "aws_instance" "cluster" {
  count         = 3
  ami           = "ami-0dcc1e21636832c5d"
  instance_type = "m5.large"

  # ...
}

# The primary use-case for the null resource is as a do-nothing container
# for arbitrary actions taken by a provisioner.
#
# In this example, three EC2 instances are created and then a
# null_resource instance is used to gather data about all three
# and execute a single action that affects them all. Due to the triggers
# map, the null_resource will be replaced each time the instance ids
# change, and thus the remote-exec provisioner will be re-run.
resource "null_resource" "cluster" {
  # Changes to any instance of the cluster requires re-provisioning
  triggers = {
    cluster_instance_ids = join(",", aws_instance.cluster[*].id)
  }

  # Bootstrap script can run on any instance of the cluster
  # So we just choose the first in this case
  connection {
    host = element(aws_instance.cluster[*].public_ip, 0)
  }

  provisioner "remote-exec" {
    # Bootstrap script called with private_ip of each node in the cluster
    inline = [
      "bootstrap-cluster.sh ${join(" ",
      aws_instance.cluster[*].private_ip)}",
    ]
  }
}

-- schema.json --
{
  "format_version": "1.0",
  "provider_schemas": {
    "registry.terraform.io/hashicorp/null": {
      "provider": {
        "version": 0,
        "block": {
          "description_kind": "plain"
        }
      },
      "resource_schemas": {
        "null_resource": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description": "This is set to a random value at create time.",
                "description_kind": "plain",
                "computed": true
              },
              "triggers": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.",
                "description_kind": "plain",
                "optional": true
              }
            },
            "description": "The `null_resource` resource implements the standard resource lifecycle but takes no further action.\n\nThe `triggers` argument allows specifying an arbitrary set of values that, when changed, will cause the resource to be replaced.",
            "description_kind": "plain"
          }
        }
      },
      "data_source_schemas": {
        "null_data_source": {
          "version": 0,
          "block": {
            "attributes": {
              "has_computed_default": {
                "type": "string",
                "description": "If set, its literal value will be stored and returned. If not, its value defaults to `\"default\"`. This argument exists primarily for testing and has little practical use.",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description": "This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.",
                "description_kind": "plain",
                "deprecated": true,
                "computed": true
              },
              "inputs": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.",
                "description_kind": "plain",
                "optional": true
              },
              "outputs": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "After the data source is \"read\", a copy of the `inputs` map.",
                "description_kind": "plain",
                "computed": true
              },
              "random": {
                "type": "string",
                "description": "A random value. This is primarily for testing and has little practical use; prefer the [hashicorp/random provider](https://registry.terraform.io/providers/hashicorp/random) for more practical random number use-cases.",
                "description_kind": "plain",
                "computed": true
              }
            },
            "description": "The `null_data_source` data source implements the standard data source lifecycle but does not\ninteract with any external APIs.\n\nHistorically, the `null_data_source` was typically used to construct intermediate values to re-use elsewhere in configuration. The\nsame can now be achieved using [locals](https://www.terraform.io/docs/language/values/locals.html).\n",
            "description_kind": "plain",
            "deprecated": true
          }
        }
      }
    }
  }
}